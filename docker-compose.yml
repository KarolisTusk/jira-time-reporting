version: '3.8'

services:
  # Laravel Application
  app:
    build: .
    container_name: jira-reporter-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:80"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - APP_URL=${APP_URL:-http://localhost:8000}
      - DB_HOST=postgres
      - DB_DATABASE=${DB_DATABASE:-jira_reporter}
      - DB_USERNAME=${DB_USERNAME:-jira_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - QUEUE_CONNECTION=redis
      - CACHE_STORE=redis
      - SESSION_DRIVER=redis
      - JIRA_HOST=${JIRA_HOST}
      - JIRA_USER=${JIRA_USER}
      - JIRA_TOKEN=${JIRA_TOKEN}
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    depends_on:
      - postgres
      - redis
    networks:
      - jira-reporter-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: jira-reporter-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_DATABASE:-jira_reporter}
      - POSTGRES_USER=${DB_USERNAME:-jira_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - jira-reporter-network

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: jira-reporter-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - jira-reporter-network

  # Nginx Load Balancer (for multiple app instances)
  nginx:
    image: nginx:alpine
    container_name: jira-reporter-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx/production.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - jira-reporter-network

  # Queue Worker (dedicated for high availability)
  queue-worker:
    build: .
    container_name: jira-reporter-queue
    restart: unless-stopped
    command: php artisan horizon
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - DB_HOST=postgres
      - DB_DATABASE=${DB_DATABASE:-jira_reporter}
      - DB_USERNAME=${DB_USERNAME:-jira_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - QUEUE_CONNECTION=redis
      - JIRA_HOST=${JIRA_HOST}
      - JIRA_USER=${JIRA_USER}
      - JIRA_TOKEN=${JIRA_TOKEN}
    volumes:
      - ./storage:/var/www/html/storage
    depends_on:
      - postgres
      - redis
    networks:
      - jira-reporter-network

  # Scheduler (for automated daily syncs)
  scheduler:
    build: .
    container_name: jira-reporter-scheduler
    restart: unless-stopped
    command: sh -c "while true; do php artisan schedule:run; sleep 60; done"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - DB_HOST=postgres
      - DB_DATABASE=${DB_DATABASE:-jira_reporter}
      - DB_USERNAME=${DB_USERNAME:-jira_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - JIRA_HOST=${JIRA_HOST}
      - JIRA_USER=${JIRA_USER}
      - JIRA_TOKEN=${JIRA_TOKEN}
    volumes:
      - ./storage:/var/www/html/storage
    depends_on:
      - postgres
      - redis
    networks:
      - jira-reporter-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  jira-reporter-network:
    driver: bridge