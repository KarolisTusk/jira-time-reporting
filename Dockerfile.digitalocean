# DigitalOcean App Platform Optimized Dockerfile
# Designed for Laravel 12 + Vue 3 + Queue Processing

FROM node:20-alpine AS frontend-builder

WORKDIR /app

# Copy package files and install dependencies
COPY package*.json ./
RUN npm ci --only=production

# Copy source files and build frontend assets
COPY . .
RUN npm run build

# Production PHP image optimized for DigitalOcean
FROM php:8.2-fpm-alpine

# Install system dependencies including build tools
RUN apk add --no-cache \
    nginx \
    supervisor \
    postgresql-dev \
    redis \
    zip \
    unzip \
    git \
    curl \
    libpng-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    icu-dev \
    oniguruma-dev \
    libzip-dev \
    bash \
    autoconf \
    gcc \
    g++ \
    make \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install \
        pdo \
        pdo_pgsql \
        gd \
        intl \
        mbstring \
        zip \
        bcmath \
        opcache \
        pcntl

# Install Redis extension with build dependencies
RUN pecl install redis && docker-php-ext-enable redis

# Clean up build dependencies to reduce image size
RUN apk del autoconf gcc g++ make

# Install Composer
COPY --from=composer:2.7 /usr/bin/composer /usr/bin/composer

# Create application directory
WORKDIR /var/www/html

# Copy composer files and install dependencies
COPY composer.json composer.lock ./
RUN composer install --no-dev --optimize-autoloader --no-interaction --no-scripts

# Copy application files
COPY . .

# Copy built frontend assets from builder stage
COPY --from=frontend-builder /app/public/build ./public/build

# Set proper permissions
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 755 /var/www/html/storage \
    && chmod -R 755 /var/www/html/bootstrap/cache

# Copy DigitalOcean specific configuration
COPY docker/digitalocean/nginx.conf /etc/nginx/nginx.conf
COPY docker/digitalocean/default.conf /etc/nginx/http.d/default.conf
COPY docker/digitalocean/supervisord.conf /etc/supervisord.conf
COPY docker/digitalocean/php.ini /usr/local/etc/php/conf.d/99-digitalocean.ini

# Create required directories
RUN mkdir -p /var/log/supervisor \
    && mkdir -p /run/nginx \
    && mkdir -p /var/www/html/storage/logs

# Generate optimized autoloader
RUN composer dump-autoload --optimize

# Health check for DigitalOcean
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose DigitalOcean App Platform port
EXPOSE 8080

# Create startup script for DigitalOcean
RUN echo '#!/bin/bash' > /start.sh \
    && echo 'set -e' >> /start.sh \
    && echo '' >> /start.sh \
    && echo '# Ensure storage directories exist' >> /start.sh \
    && echo 'mkdir -p /var/www/html/storage/{app,framework,logs}' >> /start.sh \
    && echo 'mkdir -p /var/www/html/storage/framework/{cache,sessions,views}' >> /start.sh \
    && echo '' >> /start.sh \
    && echo '# Set proper permissions' >> /start.sh \
    && echo 'chown -R www-data:www-data /var/www/html/storage' >> /start.sh \
    && echo 'chown -R www-data:www-data /var/www/html/bootstrap/cache' >> /start.sh \
    && echo '' >> /start.sh \
    && echo '# Wait for database to be ready' >> /start.sh \
    && echo 'echo "Waiting for database connection..."' >> /start.sh \
    && echo 'php artisan migrate:status --quiet || sleep 10' >> /start.sh \
    && echo '' >> /start.sh \
    && echo '# Run Laravel optimization commands' >> /start.sh \
    && echo 'php artisan config:cache' >> /start.sh \
    && echo 'php artisan route:cache' >> /start.sh \
    && echo 'php artisan view:cache' >> /start.sh \
    && echo '' >> /start.sh \
    && echo '# Start services with supervisor' >> /start.sh \
    && echo 'exec /usr/bin/supervisord -c /etc/supervisord.conf' >> /start.sh \
    && chmod +x /start.sh

# Start with our custom script
CMD ["/start.sh"]